<%- include('../partials/header') %>
<div class="dashboard-container">
  <header class="dashboard-header">
    <h1>Admin Dashboard</h1>
    <div class="button-group">
      <button id="create-user" class="btn primary">Add New User</button>
      <button id="logoutBtn" class="btn danger">Logout</button>
    </div>
  </header>

  <main class="dashboard-main">
    <div class="table-container">
      <table class="user-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Image</th>
            <th>Name</th>
            <th>Email</th>
            <th>Status</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          <% users.forEach((user) => { %>
          <tr>
            <td><%= user.id %></td>
            <td>
              <img
                src="<%= user.imageurl %>"
                alt="User Image"
                class="user-image"
              />
            </td>
            <td><%= user.username %></td>
            <td><%= user.email %></td>
            <td>
              <% if (user.isAdmin) { %> Admin <% } else { %> Not Admin <% } %>
            </td>
            <td>
              <button class="btn editBtn" data-id="<%= user.id %>">Edit</button>
              <button class="btn deleteBtn" data-id="<%= user.id %>">
                Delete
              </button>
            </td>
          </tr>
          <% }) %>
        </tbody>
      </table>
    </div>

    <div class="pagination">
      <% if (currentPage > 1) { %>
      <a
        href="/admin/dashboard?page=<%= currentPage - 1 %>&limit=<%= limit %>"
        class="pagination-btn"
        >Previous</a
      >
      <% } %> <% for (let i = 1; i <= totalPages; i++) { %>
      <a
        href="/admin/dashboard?page=<%= i %>&limit=<%= limit %>"
        class="pagination-btn <%= i === currentPage ? 'active' : '' %>"
        ><%= i %></a
      >
      <% } %> <% if (currentPage < totalPages) { %>
      <a
        href="/admin/dashboard?page=<%= currentPage + 1 %>&limit=<%= limit %>"
        class="pagination-btn"
        >Next</a
      >
      <% } %>
    </div>
  </main>
</div>

<%- include('../partials/footer') %>

<style>
  .dashboard-container {
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f9f9f9;
    padding: 20px;
    max-width: 1200px;
    margin: auto;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #4a90e2;
    color: white;
    padding: 15px 20px;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }

  .dashboard-header h1 {
    margin: 0;
    font-size: 1.5rem;
  }

  .button-group {
    display: flex;
    gap: 10px;
  }

  .btn {
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
  }

  .btn.primary {
    background-color: #28a745;
    color: white;
  }

  .btn.primary:hover {
    background-color: #218838;
  }

  .btn.danger {
    background-color: #dc3545;
    color: white;
  }

  .btn.danger:hover {
    background-color: #c82333;
  }

  .dashboard-main {
    margin-top: 20px;
  }

  .table-container {
    overflow-x: auto;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }

  .user-table {
    width: 100%;
    border-collapse: collapse;
  }

  .user-table th,
  .user-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }

  .user-table th {
    background-color: #4a90e2;
    color: white;
  }

  .user-image {
    height: 50px;
    width: 50px;
    object-fit: cover;
    border-radius: 5px;
  }

  .editBtn,
  .deleteBtn {
    background-color: #4a90e2;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
  }

  .editBtn:hover {
    background-color: #357abd;
  }

  .deleteBtn {
    background-color: #dc3545;
  }

  .deleteBtn:hover {
    background-color: #c82333;
  }

  .pagination {
    margin-top: 20px;
    text-align: center;
  }

  .pagination-btn {
    background-color: #4a90e2;
    color: white;
    padding: 10px 15px;
    border-radius: 5px;
    text-decoration: none;
    margin: 0 5px;
    display: inline-block;
    transition: background-color 0.3s ease, transform 0.2s ease;
  }

  .pagination-btn.active {
    background-color: #357abd;
  }

  .pagination-btn:hover {
    background-color: #357abd;
  }
</style>

<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css"
/>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  const logoutButton = document.getElementById("logoutBtn");
  const editButtons = document.querySelectorAll(".editBtn");
  const createUserButton = document.getElementById("create-user");
  const deleteButtons = document.querySelectorAll(".deleteBtn");

  logoutButton.addEventListener("click", async () => {
    try {
      const result = await Swal.fire({
        title: "Are you sure?",
        text: "You will be logged out of your account.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Logout",
        cancelButtonText: "Cancel",
      });

      if (result.isConfirmed) {
        await fetch("/admin/logout", {
          method: "POST",
        });

        window.location.href = "/admin/";
      }
    } catch (error) {
      console.error("Error logging out:", error);
    }
  });

  editButtons.forEach((button) => {
    button.addEventListener("click", async (event) => {
      const userId = event.target.getAttribute("data-id");

      try {
        const response = await fetch(`/admin/user?id=${userId}`, {
          method: "GET",
        });

        if (!response.ok) {
          throw new Error(
            `Network response was not ok: ${response.statusText}`
          );
        }

        const contentType = response.headers.get("Content-Type");
        if (contentType && contentType.includes("application/json")) {
          const userData = await response.json();
          const { username, email, isadmin, imageurl } = userData;

          const { value: formValues } = await Swal.fire({
            title: "Edit User Details",
            html: `
            <div style="display: flex; flex-direction: column; align-items: center;">
              <img id="image-preview" src="${imageurl}" style="height: 100px; width: 200px; margin-bottom: 10px;" />
              <input id="swal-input1" class="swal2-input" value="${username}" placeholder="Username">
              <input id="swal-input2" class="swal2-input" value="${email}" placeholder="Email">
              <select id="swal-input3" class="swal2-input">
                <option value="true" ${isadmin ? "selected" : ""}>True</option>
                <option value="false" ${
                  !isadmin ? "selected" : ""
                }>False</option>
              </select>
              <input id="swal-input4" class="swal2-input" type="file" placeholder="Upload Image">
            </div>
          `,
            focusConfirm: false,
            showCancelButton: true,
            confirmButtonText: "Update",
            cancelButtonText: "Cancel",
            preConfirm: async () => {
              const newUsername = document
                .getElementById("swal-input1")
                .value.trim();
              const newEmail = document
                .getElementById("swal-input2")
                .value.trim();
              const newIsAdmin =
                document.getElementById("swal-input3").value === "true";
              const newImageFile =
                document.getElementById("swal-input4").files[0];

              if (!newUsername || !newEmail) {
                Swal.showValidationMessage("Please fill out all fields.");
                return false;
              }

              let newImageUrl = imageurl;
              if (newImageFile) {
                const formData = new FormData();
                formData.append("file", newImageFile);
                formData.append("upload_preset", "gkrbyxgv");

                const uploadResponse = await fetch(
                  "https://api.cloudinary.com/v1_1/dqjjysikb/image/upload",
                  {
                    method: "POST",
                    body: formData,
                  }
                );

                if (!uploadResponse.ok) {
                  throw new Error("Cloudinary upload failed");
                }

                const uploadData = await uploadResponse.json();
                newImageUrl = uploadData.secure_url;
              }
              return {
                username: newUsername,
                email: newEmail,
                isadmin: newIsAdmin,
                imageurl: newImageUrl,
              };
            },
          });

          if (formValues) {
            console.log(formValues);
            const updateResponse = await fetch(`/admin/user/${userId}`, {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(formValues),
            });

            if (!updateResponse.ok) {
              throw new Error("Failed to update user");
            }

            window.location.reload();
          }
        } else {
          const errorText = await response.text();
          throw new Error(
            `Unexpected response type: ${contentType}\n${errorText}`
          );
        }
      } catch (error) {
        console.error("Error:", error);
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: error.message,
        });
      }
    });
  });

  // createUserButton.addEventListener("click", async () => {
  //   try {
  //     const { value: formValues } = await Swal.fire({
  //       title: "Add New User",
  //       html: `
  //       <div style="display: flex; flex-direction: column; align-items: center;">
  //         <input id="swal-input1" class="swal2-input" placeholder="Username">
  //         <input id="swal-input2" class="swal2-input" placeholder="Email">
  //         <input id="swal-input3" class="swal2-input" type="password" placeholder="Password">
  //         <select id="swal-input4" class="swal2-input">
  //           <option value="true">True</option>
  //           <option value="false">False</option>
  //         </select>
  //         <input id="swal-input5" class="swal2-input" type="file" placeholder="Upload Image">
  //       </div>
  //       `,
  //       focusConfirm: false,
  //       showCancelButton: true,
  //       confirmButtonText: "Add User",
  //       cancelButtonText: "Cancel",
  //       preConfirm: async () => {
  //         const username = document.getElementById("swal-input1").value.trim();
  //         const email = document.getElementById("swal-input2").value.trim();
  //         const password = document.getElementById("swal-input3").value.trim();
  //         const isAdmin =
  //           document.getElementById("swal-input4").value === "true";
  //         const imageFile = document.getElementById("swal-input5").files[0];

  //         if (!username || !email || !password) {
  //           Swal.showValidationMessage("Please fill out all fields.");
  //           return false;
  //         }

  //         let imageUrl = "";
  //         if (imageFile) {
  //           const formData = new FormData();
  //           formData.append("file", imageFile);
  //           formData.append("upload_preset", "gkrbyxgv");

  //           const uploadResponse = await fetch(
  //             "https://api.cloudinary.com/v1_1/dqjjysikb/image/upload",
  //             {
  //               method: "POST",
  //               body: formData,
  //             }
  //           );

  //           if (!uploadResponse.ok) {
  //             throw new Error("Cloudinary upload failed");
  //           }

  //           const uploadData = await uploadResponse.json();
  //           imageUrl = uploadData.secure_url;
  //         }

  //         return {
  //           username,
  //           email,
  //           password,
  //           isadmin: isAdmin,
  //           imageurl: imageUrl,
  //         };
  //       },
  //     });

  //     if (formValues) {
  //       const createResponse = await fetch("/admin/user", {
  //         method: "POST",
  //         headers: {
  //           "Content-Type": "application/json",
  //         },
  //         body: JSON.stringify(formValues),
  //       });

  //       if (!createResponse.ok) {
  //         throw new Error("Failed to add new user");
  //       }

  //       window.location.reload();
  //     }
  //   } catch (error) {
  //     console.error("Error:", error);
  //     Swal.fire({
  //       icon: "error",
  //       title: "Oops...",
  //       text: error.message,
  //     });
  //   }
  // });

  createUserButton.addEventListener("click", async () => {
    try {
      const { value: formValues } = await Swal.fire({
        title: "Add New User",
        html: `
        <div style="display: flex; flex-direction: column; align-items: center;">
          <input id="swal-input1" class="swal2-input" placeholder="Username">
          <input id="swal-input2" class="swal2-input" placeholder="Email">
          <input id="swal-input3" class="swal2-input" type="password" placeholder="Password">
          <select id="swal-input4" class="swal2-input">
            <option value="true">True</option>
            <option value="false">False</option>
          </select>
          <input id="swal-input5" class="swal2-input" type="file" placeholder="Upload Image">
        </div>
      `,
        focusConfirm: false,
        showCancelButton: true,
        confirmButtonText: "Add User",
        cancelButtonText: "Cancel",
        preConfirm: async () => {
          const username = document.getElementById("swal-input1").value.trim();
          const email = document.getElementById("swal-input2").value.trim();
          const password = document.getElementById("swal-input3").value.trim();
          const isAdmin =
            document.getElementById("swal-input4").value === "true";
          const imageFile = document.getElementById("swal-input5").files[0];

          if (!username || !email || !password) {
            Swal.showValidationMessage("Please fill out all fields.");
            return false;
          }

          let imageUrl = "";
          if (imageFile) {
            const formData = new FormData();
            formData.append("file", imageFile);
            formData.append("upload_preset", "gkrbyxgv");

            const uploadResponse = await fetch(
              "https://api.cloudinary.com/v1_1/dqjjysikb/image/upload",
              {
                method: "POST",
                body: formData,
              }
            );

            if (!uploadResponse.ok) {
              throw new Error("Cloudinary upload failed");
            }

            const uploadData = await uploadResponse.json();
            imageUrl = uploadData.secure_url;
          }

          return {
            username,
            email,
            password,
            isadmin: isAdmin,
            imageurl: imageUrl,
          };
        },
      });

      if (formValues) {
        const createResponse = await fetch("/admin/user", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(formValues),
        });

        if (!createResponse.ok) {
          throw new Error("Failed to add new user");
        }

        window.location.reload(); // or fetch new page data here
      }
    } catch (error) {
      console.error("Error:", error);
      Swal.fire({
        icon: "error",
        title: "Oops...",
        text: error.message,
      });
    }
  });

  deleteButtons.forEach((button) => {
    button.addEventListener("click", async (event) => {
      const userId = event.target.getAttribute("data-id");

      try {
        const result = await Swal.fire({
          title: "Are you sure?",
          text: "This user will be deleted permanently.",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: "Delete",
          cancelButtonText: "Cancel",
        });

        if (result.isConfirmed) {
          const deleteResponse = await fetch(`/admin/user/${userId}`, {
            method: "DELETE",
          });

          if (!deleteResponse.ok) {
            throw new Error("Failed to delete user");
          }

          window.location.reload();
        }
      } catch (error) {
        console.error("Error:", error);
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: error.message,
        });
      }
    });
  });
</script>
